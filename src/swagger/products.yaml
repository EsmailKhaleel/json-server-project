# Products Routes Documentation
paths:
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve all products with optional filtering and pagination
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of products per page
          required: false
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
        - name: sortBy
          in: query
          description: Sort field (name, price, createdAt)
          required: false
          schema:
            type: string
            enum: [name, price, createdAt]
        - name: sortOrder
          in: query
          description: Sort order (asc, desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
                  statusCode:
                    type: integer
                    example: 200

    post:
      tags:
        - Products
      summary: Create a new product
      description: Create a new product (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    $ref: '#/components/schemas/Product'
                  statusCode:
                    type: integer
                    example: 201
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    $ref: '#/components/schemas/Product'
                  statusCode:
                    type: integer
                    example: 200
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Products
      summary: Update product
      description: Update a product (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    $ref: '#/components/schemas/Product'
                  statusCode:
                    type: integer
                    example: 200
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Products
      summary: Delete product
      description: Delete a product (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deleted successfully"
                  statusCode:
                    type: integer
                    example: 200
        '401':
          description: Unauthorized - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/upload-image:
    post:
      tags:
        - Products
      summary: Upload product image
      description: Upload product image to Cloudinary (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Image uploaded successfully"
                  image:
                    type: string
                    description: Cloudinary image URL
                  statusCode:
                    type: integer
                    example: 200
        '400':
          description: Bad request - invalid file type or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 