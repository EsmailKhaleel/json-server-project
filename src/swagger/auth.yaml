# Authentication Routes Documentation
paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT authentication token
                  user:
                    $ref: '#/components/schemas/User'
                  statusCode:
                    type: integer
                    example: 201
        '400':
          description: Bad request - validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT token
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT authentication token
                  user:
                    $ref: '#/components/schemas/User'
                  statusCode:
                    type: integer
                    example: 200
        '400':
          description: Bad request - missing email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get the currently authenticated user's information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  statusCode:
                    type: integer
                    example: 200
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/updatedetails:
    put:
      tags:
        - Authentication
      summary: Update user details
      description: Update the current user's name and email
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  statusCode:
                    type: integer
                    example: 200
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/updatepassword:
    put:
      tags:
        - Authentication
      summary: Update user password
      description: Update the current user's password
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: New JWT token
                  statusCode:
                    type: integer
                    example: 200
        '401':
          description: Unauthorized - invalid current password or token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/upload-image:
    post:
      tags:
        - Authentication
      summary: Upload user profile image
      description: Upload and update user's profile image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Image uploaded successfully"
                  image:
                    type: string
                    description: Cloudinary image URL
                  user:
                    $ref: '#/components/schemas/User'
                  statusCode:
                    type: integer
                    example: 200
        '400':
          description: Bad request - invalid file type or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 